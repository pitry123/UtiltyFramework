<?xml version="1.0"?>
<Rules>
  <Version>1</Version>
  <Framework>
    <GenerationMethod>Native</GenerationMethod>
  </Framework>
  <RulesManagerLocation>J:\LandSystems\Framework_2.0\Infrastructure\Samples\Rules\Common\RulesSample</RulesManagerLocation>
  <DbXmlLocation>J:\LandSystems\Framework_2.0\Infrastructure\Samples\Rules\DE\DB.xml</DbXmlLocation>
  <IniLocation>J:\LandSystems\Framework_2.0\Infrastructure\Samples\Rules\Common\RulesSample</IniLocation>
  <EnumsHeaderFiles>
    <HeaderFile>../RulesSample/BringTo_StateMachine.h</HeaderFile>
    <HeaderFile>../RulesSample/CommonDbDefs.h</HeaderFile>
    <HeaderFile>../RulesSample/ControllerDefs.h</HeaderFile>
    <HeaderFile>../RulesSample/Operational_ActivitiesLogicDB.h</HeaderFile>
    <HeaderFile>../RulesSample/ProjectCommon.h</HeaderFile>
    <HeaderFile>../RulesSample/ProjectCommonDbDefs.h</HeaderFile>
    <HeaderFile>../RulesSample/Scanning_StateMachine.h</HeaderFile>
    <HeaderFile>../RulesSample/SystemStates_StateMachine.h</HeaderFile>
    <HeaderFile>../RulesSample/UiDB.h</HeaderFile>
  </EnumsHeaderFiles>
  <AlternativeEnumsHeaderFiles>
    <HeaderFile>
    </HeaderFile>
    <HeaderFile>
    </HeaderFile>
    <HeaderFile>
    </HeaderFile>
    <HeaderFile>
    </HeaderFile>
    <HeaderFile>
    </HeaderFile>
    <HeaderFile>
    </HeaderFile>
    <HeaderFile>
    </HeaderFile>
    <HeaderFile>
    </HeaderFile>
    <HeaderFile>
    </HeaderFile>
  </AlternativeEnumsHeaderFiles>
  <IncludeFilesInfo>
    <UseAbsPath>True</UseAbsPath>
    <AbsGenricFolderPath>Generic</AbsGenricFolderPath>
    <RelGenricFolderPath>../../../../../../Generic</RelGenricFolderPath>
  </IncludeFilesInfo>
  <ExportSymbols>False</ExportSymbols>
  <InputDataBase>RulesInputDBEnum</InputDataBase>
  <OutputDataBase>RulesOutputDBEnum</OutputDataBase>
  <RulesExistenceDataBase>RulesExistenceDBEnum</RulesExistenceDataBase>
  <RulesEnabledDataBase>RulesEnabledDBEnum</RulesEnabledDataBase>
  <Category>
    <Name>Act Calibration [BoreSight]</Name>
    <Rule>
      <Name>ConditionForLdDayBoreSight</Name>
      <Id>0</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For LD-day BoreSightd</Comment>
      <Expression>
        <Condition>
          <Function>GetInputLdCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDayCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMastClosed</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iDayCamCommStatus</Trigger>
        <Trigger>iLdCommStatus</Trigger>
        <Trigger>iMastClosed</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ConditionForLiDayBoreSight</Name>
      <Id>1</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For LI-day BoreSight</Comment>
      <Expression>
        <Condition>
          <Function>GetInputLiCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDayCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_POWER</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputLdLiLasingPasswordSts</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iDayCamCommStatus</Trigger>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>iLiCommStatus</Trigger>
        <Trigger>iLdLiLasingPasswordSts</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ConditionForThermalBoreSight</Name>
      <Id>2</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For thermal BoreSight</Comment>
      <Expression>
        <Condition>
          <Function>GetInputLrfCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputNightCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_POWER</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>iNightCamCommStatus</Trigger>
        <Trigger>iLrfCamCommStatus</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act Calibration [Drift]</Name>
    <Rule>
      <Name>ConditionForDrift</Name>
      <Id>3</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For Drift</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMobileStatus</Function>
          <Operator>==</Operator>
          <Enumeration>MOBILE_FALSE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputPalmConditionForDrift</Function>
          <Operator>==</Operator>
          <Enumeration>CONDITION_YES</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActTrackingStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActScanningStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActBringToStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActNucStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDesignatorStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputIlluminatorStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iMobileStatus</Trigger>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>oPalmConditionForDrift</Trigger>
        <Trigger>iActTrackingStatus</Trigger>
        <Trigger>iActScanningStatus</Trigger>
        <Trigger>iActBringToStatus</Trigger>
        <Trigger>iActNucStatus</Trigger>
        <Trigger>iDesignatorStatus</Trigger>
        <Trigger>iIlluminatorStatus</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>EndDriftFail</Name>
      <Id>4</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>End Drift Fail</Comment>
      <Expression>
        <Condition>
          <Function>GetInputActDriftStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetResConditionForDrift</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_FALSE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>rConditionForDrift</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>EndDriftSuccess</Name>
      <Id>5</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>End Drift Success</Comment>
      <Expression>
        <Condition>
          <Function>GetInputActDriftStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDriftCompleted</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iDriftCompleted</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>StartDrift</Name>
      <Id>6</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Start Drift Cancellation</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForDrift</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActDriftStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>rConditionForDrift</Trigger>
        <Trigger>iActDriftStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActDriftCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_START</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act Calibration [Drift] [Palm Condition]</Name>
    <Rule>
      <Name>Palm pressed</Name>
      <Id>7</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Palm pressed</Comment>
      <Expression>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iHandlePalmStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oPalmConditionForDrift</True_Task_Field>
          <True_Task_State>CONDITION_NO</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oPalmConditionForDrift</False_Task_Field>
          <False_Task_State>CONDITION_YES</False_Task_State>
          <False_Task_Notify>Always</False_Task_Notify>
          <False_Task_TimeOut>2000</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
  </Category>
  <Category>
    <Name>Act Calibration [Fov Calib]</Name>
    <Rule>
      <Name>ConditionForDayFovCalib</Name>
      <Id>8</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For Day Fov Calibration</Comment>
      <Expression>
        <Condition>
          <Function>GetInputDayCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_POWER</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iDayCamCommStatus</Trigger>
        <Trigger>iCurrentWorkMode</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ConditionForThermalFovCalib</Name>
      <Id>9</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For Thermal Fov Calibration</Comment>
      <Expression>
        <Condition>
          <Function>GetInputNightCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_POWER</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>iNightCamCommStatus</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General</Name>
    <Rule>
      <Name>Enable General Activities</Name>
      <Id>10</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Enable General Activities</Comment>
      <Expression>
        <Condition>
          <Function>GetInputEnterGeneral</Function>
          <Operator>==</Operator>
          <Enumeration>ENABLED_TRUE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iEnterGeneral</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActSystemStatesCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_WAKE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
        <True_Task>
          <True_Task_Field>oActWorkModeCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_WAKE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
        <True_Task>
          <True_Task_Field>oActControlCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_WAKE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [Control] [Active Operator]</Name>
    <Rule>
      <Name>ActiveOperatorCommander</Name>
      <Id>11</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Active Operator Commander</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>!=</Operator>
          <Enumeration>MODE_MANUAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMastOpened</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputHandleAnalogsElvAboveThreshold</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputHandleAnalogsTrvAboveThreshold</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputCurrentMaster</Function>
          <Operator>==</Operator>
          <Enumeration>USER_COMMANDER</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iHandleAnalogsElvAboveThreshold</Trigger>
        <Trigger>iHandleAnalogsTrvAboveThreshold</Trigger>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>iMastOpened</Trigger>
        <Trigger>oCurrentMaster</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActiveOperator</True_Task_Field>
          <True_Task_State>USER_COMMANDER</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ActiveOperatorGunner</Name>
      <Id>12</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Active Operator Gunner</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>!=</Operator>
          <Enumeration>MODE_MANUAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMastOpened</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputHandleAnalogsElvAboveThreshold</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputHandleAnalogsTrvAboveThreshold</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputCurrentMaster</Function>
          <Operator>==</Operator>
          <Enumeration>USER_GUNNER</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iHandleAnalogsElvAboveThreshold</Trigger>
        <Trigger>iHandleAnalogsTrvAboveThreshold</Trigger>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>iMastOpened</Trigger>
        <Trigger>oCurrentMaster</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActiveOperator</True_Task_Field>
          <True_Task_State>USER_GUNNER</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ActiveOperatorNone</Name>
      <Id>13</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Active Operator None</Comment>
      <Expression>
        <Condition>
          <Function>GetResActiveOperatorCommander</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_FALSE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetResActiveOperatorGunner</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_FALSE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>rActiveOperatorCommander</Trigger>
        <Trigger>rActiveOperatorGunner</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActiveOperator</True_Task_Field>
          <True_Task_State>USER_NONE</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [System States] [Boresight]</Name>
    <Rule>
      <Name>BoresightToMaintenance</Name>
      <Id>14</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Boresight To Maintenance</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_BORESIGHT</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_MAINTENANCE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_MAINTENANCE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>BoresightToOperational</Name>
      <Id>15</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change state to Operational</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_BORESIGHT</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_OPERATIONAL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [System States] [Calibration]</Name>
    <Rule>
      <Name>CalibrationToMaintenance</Name>
      <Id>16</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Calibration To Maintenance</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_CALIBRATION</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_MAINTENANCE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_MAINTENANCE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>CalibrationToOperational</Name>
      <Id>17</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change state to Operational</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_CALIBRATION</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_OPERATIONAL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [System States] [IBit]</Name>
    <Rule>
      <Name>IbitToMaintenance</Name>
      <Id>18</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Ibi tTo Maintenance</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_IBIT</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_MAINTENANCE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_MAINTENANCE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>IBitToOperational</Name>
      <Id>19</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change state to Operational</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_IBIT</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_OPERATIONAL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [System States] [Init]</Name>
    <Rule>
      <Name>InitToOperational</Name>
      <Id>20</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change state to Operational</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_INITIALIZATION</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_OPERATIONAL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [System States] [Maintenance]</Name>
    <Rule>
      <Name>MaintenanceToBoresight</Name>
      <Id>21</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change state to Boresight</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_MAINTENANCE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_BORESIGHT</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_BORESIGHT</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>MaintenanceToCalibration</Name>
      <Id>22</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change state to Calibration</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_MAINTENANCE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_CALIBRATION</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_CALIBRATION</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>MaintenanceToIBit</Name>
      <Id>23</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change state to IBit</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_MAINTENANCE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_IBIT</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_IBIT</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>MaintenanceToOperational</Name>
      <Id>24</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Maintenance To Operational</Comment>
      <Expression>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_OPERATIONAL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [System States] [Operational]</Name>
    <Rule>
      <Name>OperationalToMaintenance</Name>
      <Id>25</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Operational To Maintenance</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputRequestSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_MAINTENANCE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iRequestSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToSystemState</True_Task_Field>
          <True_Task_State>STATE_MAINTENANCE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [Work Mode] [Manual]</Name>
    <Rule>
      <Name>ChangeToManualMode</Name>
      <Id>26</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change To Manual Mode</Comment>
      <Expression>
        <Condition>
          <Function>GetInputWorkModeRequest</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_MANUAL</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetResConditionForPowerMode</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_FALSE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iWorkModeRequest</Trigger>
        <Trigger>rConditionForPowerMode</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oChangeWorkMode</True_Task_Field>
          <True_Task_State>MODE_MANUAL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [Work Mode] [Power]</Name>
    <Rule>
      <Name>ChangeToPowerMode</Name>
      <Id>27</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change To Power Mode</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForPowerMode</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputWorkModeRequest</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_POWER</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputWorkModeRequest</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetResConditionForStabMode</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_FALSE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>rConditionForPowerMode</Trigger>
        <Trigger>rConditionForStabMode</Trigger>
        <Trigger>iWorkModeRequest</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oChangeWorkMode</True_Task_Field>
          <True_Task_State>MODE_POWER</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ConditionForPowerMode</Name>
      <Id>28</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For Power Mode</Comment>
      <Expression>
        <Condition>
          <Function>GetInputShaftEncoderElvStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputShaftEncoderTrvStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputVoltageStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCommutationStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDriverElvStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDriverTrvStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputPowerErrorGroupStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iShaftEncoderElvStatus</Trigger>
        <Trigger>iShaftEncoderTrvStatus</Trigger>
        <Trigger>iVoltageStatus</Trigger>
        <Trigger>iCommutationStatus</Trigger>
        <Trigger>iDriverElvStatus</Trigger>
        <Trigger>iDriverTrvStatus</Trigger>
        <Trigger>iWorkModeRequest</Trigger>
        <Trigger>iPowerErrorGroupStatus</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act General [Work Mode] [Stab]</Name>
    <Rule>
      <Name>ChangeToStabMode</Name>
      <Id>29</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Change To Stab Mode</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForStabMode</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputWorkModeRequest</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>rConditionForStabMode</Trigger>
        <Trigger>iWorkModeRequest</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oChangeWorkMode</True_Task_Field>
          <True_Task_State>MODE_STAB</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ConditionForStabMode</Name>
      <Id>30</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For Stab Mode</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForPowerMode</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputGyroElvStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputGyroTrvStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMastOpened</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputStabErrorGroupStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_CALIBRATION</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>rConditionForPowerMode</Trigger>
        <Trigger>iGyroElvStatus</Trigger>
        <Trigger>iGyroTrvStatus</Trigger>
        <Trigger>iMastOpened</Trigger>
        <Trigger>iStabErrorGroupStatus</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act Observation [Ti] [Nuc]</Name>
    <Rule>
      <Name>ConditionForNuc</Name>
      <Id>31</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition for nuc</Comment>
      <Expression>
        <Condition>
          <Function>GetInputMastOpened</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputScanningState</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_SCANNING_SCANNING</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActBringToStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputNightCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputLiLasingRequest</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputLdLasingRequest</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iMastOpened</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
        <Trigger>iScanningState</Trigger>
        <Trigger>iBringToState</Trigger>
        <Trigger>iNightCamCommStatus</Trigger>
        <Trigger>oLiLasingRequest</Trigger>
        <Trigger>oLdLasingRequest</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act Operational [AutoTracking]</Name>
    <Rule>
      <Name>ConditionForTracking</Name>
      <Id>32</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition for tracking</Comment>
      <Expression>
        <Condition>
          <Function>GetInputActBringToStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActScanningStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActNucStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActBoreSightStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActVmdStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActFusionStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iActNucStatus</Trigger>
        <Trigger>iActScanningStatus</Trigger>
        <Trigger>iActBringToStatus</Trigger>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>iActBoreSightStatus</Trigger>
        <Trigger>iActVmdStatus</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
        <Trigger>iActFusionStatus</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>StartAutoTracking</Name>
      <Id>33</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Start auto tracking</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForTracking</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHandleTrackStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputAutoTrackingStatus</Function>
          <Operator>==</Operator>
          <Enumeration>TRACKER_IS_IDLE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iHandleTrackStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActAutoTrackingCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_START</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>StopAutoTrackingByFail</Name>
      <Id>34</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Stop Auto trackingByFail</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetResConditionForTracking</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_FALSE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputAutoTrackingStatus</Function>
          <Operator>==</Operator>
          <Enumeration>TRACKER_IS_IDLE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputTrackingCamChange</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputGunnerSelectedSys</Function>
          <Operator>!=</Operator>
          <Enumeration>SYSTEM_OBSERVATION</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputTrackingUser</Function>
          <Operator>==</Operator>
          <Enumeration>USER_GUNNER</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCommanderSelectedSys</Function>
          <Operator>!=</Operator>
          <Enumeration>SYSTEM_OBSERVATION</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputTrackingUser</Function>
          <Operator>==</Operator>
          <Enumeration>USER_COMMANDER</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputTrackingCam</Function>
          <Operator>==</Operator>
          <Enumeration>CAMERA_DAY</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDayCamCommStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputTrackingCam</Function>
          <Operator>==</Operator>
          <Enumeration>CAMERA_NIGHT</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputNightCamCommStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActTrackingStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>rConditionForTracking</Trigger>
        <Trigger>iAutoTrackingStatus</Trigger>
        <Trigger>iTrackingCamChange</Trigger>
        <Trigger>iCommanderSelectedSys</Trigger>
        <Trigger>iGunnerSelectedSys</Trigger>
        <Trigger>iNightCamCommStatus</Trigger>
        <Trigger>iDayCamCommStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActAutoTrackingCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_STOP_FAIL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>StopAutoTrackingByUser</Name>
      <Id>35</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Stop Auto tracking by User</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputHandleTrackStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputAutoTrackingStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>TRACKER_IS_IDLE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmInitiator</Function>
          <Operator>==</Operator>
          <Enumeration>USER_COMMANDER</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputAutoTrackingStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>TRACKER_IS_IDLE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputTrackingUser</Function>
          <Operator>==</Operator>
          <Enumeration>USER_GUNNER</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iHandleTrackStatus</Trigger>
        <Trigger>iHandlePalmStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActAutoTrackingCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_STOP_ABORT</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act Operational [Bring To]</Name>
    <Rule>
      <Name>BringToInitiateEnded</Name>
      <Id>36</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Bring To Initiate Ended</Comment>
      <Expression>
        <Condition>
          <Function>GetInputBringToState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_BRING_TO_INITIATE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActDriftStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputHandleAnalogsPermission</Function>
          <Operator>==</Operator>
          <Enumeration>PERMISSION_NONE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iBringToState</Trigger>
        <Trigger>iActDriftStatus</Trigger>
        <Trigger>oHandleAnalogsPermission</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToBringToState</True_Task_Field>
          <True_Task_State>STATE_BRING_TO_BRING_TO</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ConditionForBringObsrvToGun</Name>
      <Id>37</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition for bring observation station to weapon station process.</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForBringTo</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputGunShaftEncoderElvStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputGunShaftEncoderTrvStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATUS_OK</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>rConditionForBringTo</Trigger>
        <Trigger>iGunShaftEncoderElvStatus</Trigger>
        <Trigger>iGunShaftEncoderTrvStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oConditionsForBringObsrvToGun</True_Task_Field>
          <True_Task_State>CONDITION_YES</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oConditionsForBringObsrvToGun</False_Task_Field>
          <False_Task_State>CONDITION_NO</False_Task_State>
          <False_Task_Notify>OnChange</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
    <Rule>
      <Name>ConditionForBringTo</Name>
      <Id>38</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For Bring To</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActBoreSightStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActScanningStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputLdLasingRequest</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputLiLasingRequest</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>iActBoreSightStatus</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
        <Trigger>iActScanningStatus</Trigger>
        <Trigger>oLiLasingRequest</Trigger>
        <Trigger>oLdLasingRequest</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oBringToPermission</True_Task_Field>
          <True_Task_State>PERMISSION_ALL</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oBringToPermission</False_Task_Field>
          <False_Task_State>PERMISSION_NONE</False_Task_State>
          <False_Task_Notify>OnChange</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
    <Rule>
      <Name>EndBringToFail</Name>
      <Id>39</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>End Bring To Fail</Comment>
      <Expression>
        <Condition>
          <Function>GetInputActBringToStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetResConditionForBringTo</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_FALSE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputProcessBringToStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>USER_REQUEST_ENTER_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputControlBringToProcessStatus</Function>
          <Operator>==</Operator>
          <Enumeration>PROCESS_FINISHED_FAIL</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>rConditionForBringTo</Trigger>
        <Trigger>iProcessBringToStatus</Trigger>
        <Trigger>iControlBringToProcessStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToBringToState</True_Task_Field>
          <True_Task_State>STATE_BRING_TO_END_FAIL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>EndBringToSuccess</Name>
      <Id>40</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>End Bring To Success</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputControlBringToProcessStatus</Function>
          <Operator>==</Operator>
          <Enumeration>PROCESS_FINISHED_OK</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActBringToStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iControlBringToProcessStatus</Trigger>
        <Trigger>iHandlePalmStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToBringToState</True_Task_Field>
          <True_Task_State>STATE_BRING_TO_END_SUCCESS</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>StartBringTo</Name>
      <Id>41</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Start Bring To</Comment>
      <Expression>
        <Condition>
          <Function>GetInputProcessBringToStatus</Function>
          <Operator>==</Operator>
          <Enumeration>USER_REQUEST_ENTER_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetResConditionForBringTo</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActBringToStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iProcessBringToStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActBringToCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_START</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act Operational [Lasing]</Name>
    <Rule>
      <Name>PerformLasing</Name>
      <Id>42</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Perform Lasing</Comment>
      <Expression>
        <Condition>
          <Function>GetInputHandleLaseStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputHandleLasePermission</Function>
          <Operator>!=</Operator>
          <Enumeration>PERMISSION_NONE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iHandleLaseStatus</Trigger>
        <Trigger>oHandleLasePermission</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActLaseCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_START</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oActLaseCmd</False_Task_Field>
          <False_Task_State>ACTIVITY_STOP_SUCCESS</False_Task_State>
          <False_Task_Notify>Always</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
    <Rule>
      <Name>WakeLasingActivity</Name>
      <Id>43</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Wake Lasing Activity</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputActBoreSightStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDesignatorStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OFF</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputIlluminatorStatus</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OFF</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iCurrentSystemState</Trigger>
        <Trigger>iDesignatorStatus</Trigger>
        <Trigger>iIlluminatorStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActLaseCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_WAKE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oActLaseCmd</False_Task_Field>
          <False_Task_State>ACTIVITY_SUSPEND</False_Task_State>
          <False_Task_Notify>Always</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
  </Category>
  <Category>
    <Name>Act Operational [Ld]</Name>
    <Rule>
      <Name>ConditionForLdEnable</Name>
      <Id>44</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Enable Li process when all conditions are true</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMastOpened</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputLdLiLasingPasswordSts</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHatchesCloseSts</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_BORESIGHT</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMastClosed</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputBoreSightType</Function>
          <Operator>==</Operator>
          <Enumeration>BORE_SIGHT_TYPE_LD_DAY</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputBoreSightType</Function>
          <Operator>==</Operator>
          <Enumeration>BORE_SIGHT_TYPE_LD_THERMAL</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputScanningState</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_SCANNING_SCANNING</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputBringToState</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_BRING_TO_BRING_TO</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCommanderSelectedSys</Function>
          <Operator>==</Operator>
          <Enumeration>SYSTEM_OBSERVATION</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputLdCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputLdNormalTemperature</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iMastOpened</Trigger>
        <Trigger>iLdLiLasingPasswordSts</Trigger>
        <Trigger>iScanningState</Trigger>
        <Trigger>iBringToState</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
        <Trigger>iCommanderSelectedSys</Trigger>
        <Trigger>iHatchesCloseSts</Trigger>
        <Trigger>iBoreSightType</Trigger>
        <Trigger>iLdCommStatus</Trigger>
        <Trigger>iLdNormalTemperature</Trigger>
        <Trigger>iMastClosed</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oLdProcessEnableCmd</True_Task_Field>
          <True_Task_State>ENABLED_TRUE</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oLdProcessEnableCmd</False_Task_Field>
          <False_Task_State>ENABLED_FALSE</False_Task_State>
          <False_Task_Notify>OnChange</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
    <Rule>
      <Name>ConditionForLdPower</Name>
      <Id>45</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Enable Li process when all conditions are true</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForLdEnable</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputLdOnOffRequest</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_BORESIGHT</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iLdOnOffRequest</Trigger>
        <Trigger>rConditionForLdEnable</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oLdPowerEnableCmd</True_Task_Field>
          <True_Task_State>BOOL_TRUE</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oLdPowerEnableCmd</False_Task_Field>
          <False_Task_State>BOOL_FALSE</False_Task_State>
          <False_Task_Notify>OnChange</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
    <Rule>
      <Name>StartLdProcess</Name>
      <Id>46</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Start Li process</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForLdPower</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputLiLdLasingSwitch</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmInitiator</Function>
          <Operator>==</Operator>
          <Enumeration>USER_COMMANDER</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iLiLdLasingSwitch</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oLdLasingRequest</True_Task_Field>
          <True_Task_State>STATE_ON</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>StopLdProcess</Name>
      <Id>47</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Start Li process</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForLdPower</Function>
          <Operator>!=</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputLiLdLasingSwitch</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iLiLdLasingSwitch</Trigger>
        <Trigger>rConditionForLdPower</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oLdLasingRequest</True_Task_Field>
          <True_Task_State>STATE_OFF</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act Operational [Li]</Name>
    <Rule>
      <Name>ConditionForLiEnable</Name>
      <Id>48</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Enable Li process when all conditions are true</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMastOpened</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHatchesCloseSts</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_BORESIGHT</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputBoreSightType</Function>
          <Operator>==</Operator>
          <Enumeration>BORE_SIGHT_TYPE_LI_DAY</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputScanningState</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_SCANNING_SCANNING</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputBringToState</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_BRING_TO_BRING_TO</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCommanderSelectedSys</Function>
          <Operator>==</Operator>
          <Enumeration>SYSTEM_OBSERVATION</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputLiCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputLdLiLasingPasswordSts</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iMastOpened</Trigger>
        <Trigger>iLdLiLasingPasswordSts</Trigger>
        <Trigger>iLiCommStatus</Trigger>
        <Trigger>iScanningState</Trigger>
        <Trigger>iBringToState</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
        <Trigger>iCommanderSelectedSys</Trigger>
        <Trigger>iHatchesCloseSts</Trigger>
        <Trigger>iBoreSightType</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oLiProcessEnableCmd</True_Task_Field>
          <True_Task_State>ENABLED_TRUE</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oLiProcessEnableCmd</False_Task_Field>
          <False_Task_State>ENABLED_FALSE</False_Task_State>
          <False_Task_Notify>OnChange</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
    <Rule>
      <Name>ConditionForLiPower</Name>
      <Id>49</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Enable Li process when all conditions are true</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForLiEnable</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputLiOnOffRequest</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputLiBsOnOffRequest</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>rConditionForLiEnable</Trigger>
        <Trigger>iLiOnOffRequest</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
        <Trigger>iLiBsOnOffRequest</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oLiPowerEnableCmd</True_Task_Field>
          <True_Task_State>BOOL_TRUE</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oLiPowerEnableCmd</False_Task_Field>
          <False_Task_State>BOOL_FALSE</False_Task_State>
          <False_Task_Notify>OnChange</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
    <Rule>
      <Name>StartLiProcess</Name>
      <Id>50</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Start Li process</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForLiPower</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputLiLdLasingSwitch</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmInitiator</Function>
          <Operator>==</Operator>
          <Enumeration>USER_COMMANDER</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iLiLdLasingSwitch</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oLiLasingRequest</True_Task_Field>
          <True_Task_State>STATE_ON</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>StopLiProcess</Name>
      <Id>51</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Start Li process</Comment>
      <Expression>
        <Condition>
          <Function>GetResConditionForLiPower</Function>
          <Operator>!=</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputLiLdLasingSwitch</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>rConditionForLiPower</Trigger>
        <Trigger>iLiLdLasingSwitch</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oLiLasingRequest</True_Task_Field>
          <True_Task_State>STATE_OFF</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Act Operational [Scanning]</Name>
    <Rule>
      <Name>ConditionForScanning</Name>
      <Id>52</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Condition For Scanning</Comment>
      <Expression>
        <Condition>
          <Function>GetInputCurrentWorkMode</Function>
          <Operator>==</Operator>
          <Enumeration>MODE_STAB</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputDesignatorStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputIlluminatorStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActBoreSightStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputCurrentSystemState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_OPERATIONAL</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActBringToStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputMastOpened</Function>
          <Operator>==</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iCurrentWorkMode</Trigger>
        <Trigger>iDesignatorStatus</Trigger>
        <Trigger>iIlluminatorStatus</Trigger>
        <Trigger>iActBoreSightStatus</Trigger>
        <Trigger>iCurrentSystemState</Trigger>
        <Trigger>iActBringToStatus</Trigger>
        <Trigger>iMastOpened</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oScanningPermission</True_Task_Field>
          <True_Task_State>PERMISSION_COMMANDER</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oScanningPermission</False_Task_Field>
          <False_Task_State>PERMISSION_NONE</False_Task_State>
          <False_Task_Notify>OnChange</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
    <Rule>
      <Name>EndScanningFail</Name>
      <Id>53</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>End Scanning Fail</Comment>
      <Expression>
        <Condition>
          <Function>GetInputActScanningStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetResConditionForScanning</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_FALSE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputControlScanningProcessStatus</Function>
          <Operator>==</Operator>
          <Enumeration>PROCESS_FINISHED_FAIL</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>rConditionForScanning</Trigger>
        <Trigger>iControlScanningProcessStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToScanningState</True_Task_Field>
          <True_Task_State>STATE_SCANNING_END_FAIL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>EndScanningSuccess</Name>
      <Id>54</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>End Scanning Success</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputControlScanningProcessStatus</Function>
          <Operator>==</Operator>
          <Enumeration>PROCESS_FINISHED_OK</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputProcessScanningStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>USER_REQUEST_ENTER_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActScanningStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iControlScanningProcessStatus</Trigger>
        <Trigger>iHandlePalmStatus</Trigger>
        <Trigger>iProcessScanningStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToScanningState</True_Task_Field>
          <True_Task_State>STATE_SCANNING_END_SUCCESS</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>ScanningInitiateEnded</Name>
      <Id>55</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Scanning Initiate Ended</Comment>
      <Expression>
        <Condition>
          <Function>GetInputScanningState</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_SCANNING_INITIATE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActDriftStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iScanningState</Trigger>
        <Trigger>iActDriftStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oGoToScanningState</True_Task_Field>
          <True_Task_State>STATE_SCANNING_SCANNING</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>StartScanning</Name>
      <Id>56</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Start Scanning</Comment>
      <Expression>
        <Condition>
          <Function>GetInputProcessScanningStatus</Function>
          <Operator>==</Operator>
          <Enumeration>USER_REQUEST_ENTER_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetResConditionForScanning</Function>
          <Operator>==</Operator>
          <Enumeration>RULE_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActScanningStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iProcessScanningStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oActScanningCmd</True_Task_Field>
          <True_Task_State>ACTIVITY_START</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Permission [Handles Analogs]</Name>
    <Rule>
      <Name>DisableHandles</Name>
      <Id>57</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Disable Handles</Comment>
      <Expression>
        <Condition>
          <Function>GetOutputCurrentMaster</Function>
          <Operator>==</Operator>
          <Enumeration>USER_NONE</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputActBringToStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>oCurrentMaster</Trigger>
        <Trigger>iActBringToStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oHandleAnalogsPermission</True_Task_Field>
          <True_Task_State>PERMISSION_NONE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oHandleAnalogsPermission</False_Task_Field>
          <False_Task_State>PERMISSION_ACTIVE_USER</False_Task_State>
          <False_Task_Notify>Always</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
  </Category>
  <Category>
    <Name>Permission [Lrf]</Name>
    <Rule>
      <Name>EnableLasing</Name>
      <Id>58</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Enable Lasing</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetOutputCurrentMaster</Function>
          <Operator>==</Operator>
          <Enumeration>USER_COMMANDER</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputLdPowerEnableCmd</Function>
          <Operator>!=</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputLiPowerEnableCmd</Function>
          <Operator>!=</Operator>
          <Enumeration>BOOL_TRUE</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>||</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetOutputCurrentMaster</Function>
          <Operator>==</Operator>
          <Enumeration>USER_GUNNER</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>)</Middle_Operator>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputActLaseStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_READY</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputActLaseStatus</Function>
          <Operator>==</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>oCurrentMaster</Trigger>
        <Trigger>oLdPowerEnableCmd</Trigger>
        <Trigger>oLiPowerEnableCmd</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oHandleLasePermission</True_Task_Field>
          <True_Task_State>PERMISSION_ACTIVE_USER</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oHandleLasePermission</False_Task_Field>
          <False_Task_State>PERMISSION_NONE</False_Task_State>
          <False_Task_Notify>Always</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
  </Category>
  <Category>
    <Name>Permission [Master]</Name>
    <Rule>
      <Name>PermissionMasterCommander</Name>
      <Id>59</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Permission Master Commander</Comment>
      <Expression>
        <Condition>
          <Function>GetOutputCurrentMaster</Function>
          <Operator>==</Operator>
          <Enumeration>USER_COMMANDER</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetOutputLdLasingRequest</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetOutputLiLasingRequest</Function>
          <Operator>==</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>oCurrentMaster</Trigger>
        <Trigger>oLiLasingRequest</Trigger>
        <Trigger>oLdLasingRequest</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oHandlePalmPermission</True_Task_Field>
          <True_Task_State>PERMISSION_COMMANDER</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>PermissionMasterGunner</Name>
      <Id>60</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Permission Master Gunner</Comment>
      <Expression>
        <Condition>
          <Function>GetOutputCurrentMaster</Function>
          <Operator>==</Operator>
          <Enumeration>USER_GUNNER</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>oCurrentMaster</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oHandlePalmPermission</True_Task_Field>
          <True_Task_State>PERMISSION_AUTHORITY</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>PermissionMasterNone</Name>
      <Id>61</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Permission Master None</Comment>
      <Expression>
        <Condition>
          <Function>GetOutputCurrentMaster</Function>
          <Operator>==</Operator>
          <Enumeration>USER_NONE</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputLdLasingRequest</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetOutputLiLasingRequest</Function>
          <Operator>!=</Operator>
          <Enumeration>STATE_ON</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>oCurrentMaster</Trigger>
        <Trigger>oLiLasingRequest</Trigger>
        <Trigger>oLdLasingRequest</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oHandlePalmPermission</True_Task_Field>
          <True_Task_State>PERMISSION_ALL</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Permission [VMD]</Name>
    <Rule>
      <Name>EnableVMD</Name>
      <Id>62</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Enable VMD</Comment>
      <Expression>
        <Condition>
          <Function>GetInputActFusionStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputSlaCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iActFusionStatus</Trigger>
        <Trigger>iSlaCommStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oVmdPermission</True_Task_Field>
          <True_Task_State>PERMISSION_COMMANDER</True_Task_State>
          <True_Task_Notify>OnChange</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oVmdPermission</False_Task_Field>
          <False_Task_State>PERMISSION_NONE</False_Task_State>
          <False_Task_Notify>OnChange</False_Task_Notify>
          <False_Task_TimeOut>0</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
  </Category>
  <Category>
    <Name>Screen [Bit]</Name>
    <Rule>
      <Name>ConditionForOpticButton</Name>
      <Id>63</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>ture only there is communication on at leat one of the cameras - day, night, lrf</Comment>
      <Expression>
        <Condition>
          <Function>GetInputDayCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputNightCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
        <Middle_Operator>||</Middle_Operator>
        <Condition>
          <Function>GetInputLrfCamCommStatus</Function>
          <Operator>==</Operator>
          <Enumeration>COMMUNICATION_OK</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iDayCamCommStatus</Trigger>
        <Trigger>iNightCamCommStatus</Trigger>
        <Trigger>iLrfCamCommStatus</Trigger>
      </Triggers>
      <True_Tasks />
      <False_Tasks />
    </Rule>
  </Category>
  <Category>
    <Name>Station Master</Name>
    <Rule>
      <Name>MasterCommander</Name>
      <Id>64</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Master Commander</Comment>
      <Expression>
        <Middle_Operator>(</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmInitiator</Function>
          <Operator>==</Operator>
          <Enumeration>USER_COMMANDER</Enumeration>
        </Condition>
        <Middle_Operator>)</Middle_Operator>
      </Expression>
      <Triggers>
        <Trigger>iHandlePalmStatus</Trigger>
        <Trigger>iHandlePalmInitiator</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oCurrentMaster</True_Task_Field>
          <True_Task_State>USER_COMMANDER</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>MasterGunner</Name>
      <Id>65</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Master Gunner</Comment>
      <Expression>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_PRESSED</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputHandlePalmInitiator</Function>
          <Operator>==</Operator>
          <Enumeration>USER_GUNNER</Enumeration>
        </Condition>
        <Middle_Operator>&amp;&amp;</Middle_Operator>
        <Condition>
          <Function>GetInputActLaseStatus</Function>
          <Operator>!=</Operator>
          <Enumeration>ACTIVITY_IN_PROCESS</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iHandlePalmStatus</Trigger>
        <Trigger>iHandlePalmInitiator</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oCurrentMaster</True_Task_Field>
          <True_Task_State>USER_GUNNER</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks />
    </Rule>
    <Rule>
      <Name>MasterNone</Name>
      <Id>66</Id>
      <Form>Regular</Form>
      <TreeName>None</TreeName>
      <Comment>Active Operator None</Comment>
      <Expression>
        <Condition>
          <Function>GetInputHandlePalmStatus</Function>
          <Operator>==</Operator>
          <Enumeration>BUTTON_RELEASED</Enumeration>
        </Condition>
      </Expression>
      <Triggers>
        <Trigger>iHandlePalmStatus</Trigger>
      </Triggers>
      <True_Tasks>
        <True_Task>
          <True_Task_Field>oCurrentMaster</True_Task_Field>
          <True_Task_State>USER_NONE</True_Task_State>
          <True_Task_Notify>Always</True_Task_Notify>
          <True_Task_TimeOut>0</True_Task_TimeOut>
        </True_Task>
      </True_Tasks>
      <False_Tasks>
        <False_Task>
          <False_Task_Field>oCurrentMaster</False_Task_Field>
          <False_Task_State>USER_GUNNER</False_Task_State>
          <False_Task_Notify>Always</False_Task_Notify>
          <False_Task_TimeOut>3</False_Task_TimeOut>
        </False_Task>
      </False_Tasks>
    </Rule>
  </Category>
</Rules>