// LoggerSample.cpp : Defines the entry point for the console application.
//
#include <Core.hpp>
#include <Utils.hpp>
#include <Strings.hpp>

using namespace Logging;

static Logger APP_LOGGER = Core::Framework::CreateLogger("LoggerSample", Severity::TRACE);

class Component
{
private:
	class SubComponent
	{
	private:
		static Logger LOGGER;

	public:
		SubComponent()
		{
			LOG_FUNC(LOGGER);
			LOG_INFO(LOGGER) << "Initializing Component::SubComponent class...";
		}

		~SubComponent()
		{
			LOG_FUNC(LOGGER);
			LOG_TRACE(LOGGER) << "SubComponent is destructing...";
		}

		void DoSomeLogic()
		{
			LOG_FUNC(LOGGER);
			LOG_TRACE(LOGGER) << "Doing some logic inside Component::SubComponent::DoSomeLogic";
		}
	};	

	static Logger LOGGER;
	SubComponent m_subComponent;
	Utils::Timer m_timer;

public:
	Component()
	{
		LOG_FUNC(LOGGER);
		LOG_INFO(LOGGER) << "Initializing Component class...";
		m_timer.Elapsed() += [this]()
		{
			LOG_SCOPE(LOGGER, "Component::OnTimer(lambda)");
			LOG_TRACE(LOGGER) << "When inside the timer callback, I'm printing this message... If you can see it, your filter is set to 'trace'";
			m_subComponent.DoSomeLogic();
		};
	}

	~Component()
	{
		LOG_FUNC(LOGGER);
		LOG_TRACE(LOGGER) << "Component is destructing...";
	}

	void Start()
	{
		LOG_FUNC(LOGGER);
		LOG_INFO(LOGGER) << "The demo Component class is starting";
		LOG_TRACE(LOGGER) << "Starting component's timer";
		m_timer.Start(1000);
	}
};

Logger Component::LOGGER = Core::Framework::CreateLogger("LoggerSample.Component", APP_LOGGER.Filter());
Logger Component::SubComponent::LOGGER = Core::Framework::CreateLogger("LoggerSample.Component.SubComponent", APP_LOGGER.Filter());

int main(int argc, const char* argv[])
{	
	LOG_INFO(APP_LOGGER) << "Starting LoggerSample. Filter is: " << LOG_TO_STRING(APP_LOGGER.Filter());

	Severity currentFilter = APP_LOGGER.Filter();

	LOG_INFO(APP_LOGGER) << "About to print messages of all severities...";

	if (currentFilter > Severity::TRACE)
	{
		LOG_INFO(APP_LOGGER) << "In order to actually log all severity kinds (and also for POC), I'm going to dynamically change the severity filter of the application from "
			<< LOG_TO_STRING(currentFilter)
			<< " to "
			<< LOG_TO_STRING(Severity::TRACE);

		APP_LOGGER.Filter(Severity::TRACE);
	}

	LOG_TRACE(APP_LOGGER) << "'trace' message";
	LOG_DEBUG(APP_LOGGER) << "'debug' message";
	LOG_INFO(APP_LOGGER) << "'info' message";
	LOG_WARNING(APP_LOGGER) << "'warning' message";
	LOG_ERROR(APP_LOGGER) << "'error' message";
	LOG_FATAL(APP_LOGGER) << "'fatal' message";

	if (currentFilter > Severity::TRACE)
	{
		LOG_INFO(APP_LOGGER) << "Changing the severity filter back to " << LOG_TO_STRING(currentFilter);
		APP_LOGGER.Filter(currentFilter);
	}

	LOG_INFO(APP_LOGGER) << "Starting the demo application...";
	Component component;
	component.Start();	

	LOG_INFO(APP_LOGGER) << "Waiting for user input to close the LoggerSample application";	

	printf("Press 'Enter' key to exit...\n");
	getchar();
	printf("\n");
	LOG_QUICK("My Dynamic Logger", Severity::INFO) << "This message was generated by a dynamic logger. Don't worry, no dynamic allocations are likely to occur";
	LOG_DEBUG(APP_LOGGER) << "Got signal from user, closing...";
	LOG_INFO(APP_LOGGER) << "Exiting LoggerSample";
	return 0;
}
